import React, { useState } from 'react'
import {
  Box,
  Typography,
  TextField,
  Button,
  Card,
  CardContent,
  Divider,
  Alert,
  SxProps,
  Theme,
  Chip,
  CircularProgress
} from '@mui/material'
import {
  FileDownload,
  Build,
  CheckCircle,
  Error,
  Warning
} from '@mui/icons-material'
import { useResourcePackGenerator } from '../hooks/useResourcePackGenerator'

interface LanguageFile {
  path: string
  name: string
  content: string
  type?: 'json' | 'lang'
}

interface ResourcePackGeneratorProps {
  files: LanguageFile[]
  isProcessing: boolean
  setIsProcessing: (processing: boolean) => void
  translatedEntries?: { key: string; value: string; locale: string }[]
  onComplete?: (success: boolean, message: string) => void
  sx?: SxProps<Theme>
}

const ResourcePackGenerator: React.FC<ResourcePackGeneratorProps> = ({
  files,
  isProcessing,
  setIsProcessing,
  translatedEntries = [],
  onComplete,
  sx
}) => {
  const [packName, setPackName] = useState('My Language Pack')
  const [packDescription, setPackDescription] = useState('Generated by LangPack Studio')
  const [packFormat, setPackFormat] = useState(55)

  const {
    isGenerating,
    lastResult,
    generateAndSave,
    getGenerationSummary
  } = useResourcePackGenerator()

  const handleGenerateResourcePack = async () => {
    if (files.length === 0) return

    setIsProcessing(true)
    
    try {
      const options = {
        packName,
        description: packDescription,
        packFormat,
        includeTranslations: translatedEntries.length > 0 ? translatedEntries : undefined
      }

      const { success, result, saved } = await generateAndSave(files, options)
      
      if (success && saved) {
        onComplete?.(true, `リソースパック "${packName}" を正常に生成・保存しました`)
      } else if (success && !saved) {
        onComplete?.(false, 'リソースパックは生成されましたが、保存に失敗しました')
      } else {
        const errorMessage = result.errors.join(', ') || '不明なエラーが発生しました'
        onComplete?.(false, `リソースパック生成に失敗しました: ${errorMessage}`)
      }
      
    } catch (error) {
      console.error('Error generating resource pack:', error)
      onComplete?.(false, `予期しないエラーが発生しました: ${error instanceof Error ? error.message : 'Unknown error'}`)
    } finally {
      setIsProcessing(false)
    }
  }

  const hasFiles = files.length > 0
  const jsonFiles = files.filter(f => f.type === 'json' || f.name.endsWith('.json'))
  const langFiles = files.filter(f => f.type === 'lang' || f.name.endsWith('.lang'))

  return (
    <Box sx={{ ...sx, display: 'flex', flexDirection: 'column' }}>
      <Card sx={{ mb: 2 }} variant="outlined">
        <CardContent>
          <Typography variant="subtitle2" color="text.secondary" gutterBottom>
            パック情報
          </Typography>
          
          <TextField
            fullWidth
            label="パック名"
            value={packName}
            onChange={(e) => setPackName(e.target.value)}
            sx={{ mb: 2 }}
            size="small"
          />
          
          <TextField
            fullWidth
            label="説明"
            value={packDescription}
            onChange={(e) => setPackDescription(e.target.value)}
            sx={{ mb: 2 }}
            size="small"
          />
          
          <TextField
            fullWidth
            label="パックフォーマット"
            type="number"
            value={packFormat}
            onChange={(e) => setPackFormat(Number(e.target.value))}
            size="small"
            placeholder="55"
            helperText="Minecraft 1.21.x: 55"
          />
        </CardContent>
      </Card>

      {hasFiles && (
        <Card sx={{ mb: 2 }} variant="outlined">
          <CardContent>
            <Typography variant="subtitle2" color="text.secondary" gutterBottom>
              ファイル概要
            </Typography>
            
            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
              <Typography variant="body2">JSONファイル:</Typography>
              <Typography variant="body2" color="primary">{jsonFiles.length}</Typography>
            </Box>
            
            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
              <Typography variant="body2">LANGファイル:</Typography>
              <Typography variant="body2" color="secondary">{langFiles.length}</Typography>
            </Box>
            
            <Divider sx={{ my: 1 }} />
            
            <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
              <Typography variant="body2" fontWeight="bold">合計:</Typography>
              <Typography variant="body2" fontWeight="bold">{files.length}</Typography>
            </Box>
            
            {translatedEntries.length > 0 && (
              <>
                <Divider sx={{ my: 1 }} />
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Typography variant="body2" color="success.main" fontWeight="bold">翻訳:</Typography>
                  <Typography variant="body2" color="success.main" fontWeight="bold">{translatedEntries.length}</Typography>
                </Box>
              </>
            )}
          </CardContent>
        </Card>
      )}

      {!hasFiles && (
        <Alert severity="info" sx={{ mb: 2 }}>
          リソースパックを生成するには、まず言語ファイルをインポートしてください。
        </Alert>
      )}

      {lastResult && (
        <Card sx={{ mb: 2 }} variant="outlined">
          <CardContent>
            <Typography variant="subtitle2" color="text.secondary" gutterBottom>
              最新の生成結果
            </Typography>
            
            {lastResult.success ? (
              <Box>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                  <CheckCircle color="success" fontSize="small" />
                  <Typography variant="body2" color="success.main">
                    生成成功
                  </Typography>
                </Box>
                
                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 1 }}>
                  <Chip 
                    label={`${lastResult.generatedFiles.length} ファイル`} 
                    size="small" 
                    color="primary"
                    variant="outlined"
                  />
                  {lastResult.generatedFiles.filter(f => f.namespace).length > 0 && (
                    <Chip 
                      label={`${[...new Set(lastResult.generatedFiles.map(f => f.namespace))].length} Mod`} 
                      size="small" 
                      color="secondary"
                      variant="outlined"
                    />
                  )}
                </Box>
              </Box>
            ) : (
              <Box>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                  <Error color="error" fontSize="small" />
                  <Typography variant="body2" color="error.main">
                    生成失敗
                  </Typography>
                </Box>
                {lastResult.errors.length > 0 && (
                  <Typography variant="caption" color="error">
                    {lastResult.errors[0]}
                  </Typography>
                )}
              </Box>
            )}

            {lastResult.warnings.length > 0 && (
              <Box sx={{ mt: 1 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Warning color="warning" fontSize="small" />
                  <Typography variant="caption" color="warning.main">
                    {lastResult.warnings.length} 件の警告
                  </Typography>
                </Box>
              </Box>
            )}
          </CardContent>
        </Card>
      )}

      <Box sx={{ mt: 'auto' }}>
        <Button
          fullWidth
          variant="contained"
          size="large"
          startIcon={isProcessing || isGenerating ? (
            <CircularProgress size={20} color="inherit" />
          ) : (
            <FileDownload />
          )}
          onClick={handleGenerateResourcePack}
          disabled={!hasFiles || isProcessing || isGenerating}
          sx={{ mb: 1 }}
        >
          {isProcessing || isGenerating ? 'パック生成中...' : 'リソースパックを生成'}
        </Button>
        
        {hasFiles && (
          <Typography variant="caption" color="text.secondary" sx={{ display: 'block', textAlign: 'center', mt: 1 }}>
            {files.length}個のファイル
            {translatedEntries.length > 0 && `と${translatedEntries.length}個の翻訳`}
            からリソースパックを生成します
          </Typography>
        )}
      </Box>
    </Box>
  )
}

export default ResourcePackGenerator