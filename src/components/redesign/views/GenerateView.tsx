import React, { useState } from 'react'
import {
  Box,
  Typography,
  Card,
  CardContent,
  TextField,
  Button,
  Grid,
  Alert,
  Chip,
  Divider,
  LinearProgress,
  Stepper,
  Step,
  StepLabel,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  List,
  ListItem,
  ListItemText,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  useTheme
} from '@mui/material'
import {
  Build,
  FileDownload,
  Settings,
  ExpandMore,
  CheckCircle,
  Warning,
  Info
} from '@mui/icons-material'
import { MINECRAFT_VERSIONS, getRecommendedVersion, getPackFormatHelperText } from '../../../utils/minecraftVersions'

interface GenerateViewProps {
  files: any[]
  translatedEntries: any[]
  onGenerateResourcePack: (options: any) => void
  onNotification: (message: string, severity: 'success' | 'error' | 'warning' | 'info') => void
}

const GenerateView: React.FC<GenerateViewProps> = ({
  files,
  translatedEntries,
  onGenerateResourcePack,
  onNotification
}) => {
  const theme = useTheme()
  const [packName, setPackName] = useState('My Language Pack')
  const [packDescription, setPackDescription] = useState('Generated by LangPack Studio')
  const [packFormat, setPackFormat] = useState(getRecommendedVersion().packFormat)
  const [isGenerating, setIsGenerating] = useState(false)
  const [generationProgress, setGenerationProgress] = useState(0)

  const handleGenerate = async () => {
    setIsGenerating(true)
    setGenerationProgress(0)

    // Simulate progress
    const progressInterval = setInterval(() => {
      setGenerationProgress(prev => Math.min(prev + 10, 90))
    }, 200)

    try {
      const options = {
        packName,
        description: packDescription,
        packFormat,
        includeTranslations: translatedEntries.length > 0 ? translatedEntries : undefined
      }

      await onGenerateResourcePack(options)
      setGenerationProgress(100)
    } catch (error) {
      onNotification('リソースパック生成に失敗しました', 'error')
    } finally {
      clearInterval(progressInterval)
      setIsGenerating(false)
    }
  }

  const getFileStats = () => {
    const jsonFiles = files.filter(f => f.type === 'json' || f.name.endsWith('.json'))
    const langFiles = files.filter(f => f.type === 'lang' || f.name.endsWith('.lang'))
    
    return { jsonFiles: jsonFiles.length, langFiles: langFiles.length }
  }

  const stats = getFileStats()

  if (files.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 8 }}>
        <Build sx={{ fontSize: 80, color: 'text.disabled', mb: 2 }} />
        <Typography variant="h5" color="text.secondary" gutterBottom>
          生成するファイルがありません
        </Typography>
        <Typography variant="body1" color="text.disabled">
          まず言語ファイルをインポートしてください
        </Typography>
      </Box>
    )
  }

  return (
    <Box>
      {/* Header */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" sx={{ fontWeight: 600, mb: 1 }}>
          リソースパック生成
        </Typography>
        <Typography variant="body1" color="text.secondary">
          Minecraft用のリソースパックを生成します
        </Typography>
      </Box>

      <Grid container spacing={3}>
        {/* Configuration */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <Settings />
                パック設定
              </Typography>
              
              <TextField
                fullWidth
                label="パック名"
                value={packName}
                onChange={(e) => setPackName(e.target.value)}
                sx={{ mb: 2 }}
              />
              
              <TextField
                fullWidth
                label="説明"
                value={packDescription}
                onChange={(e) => setPackDescription(e.target.value)}
                multiline
                rows={2}
                sx={{ mb: 2 }}
              />
              
              <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel>Minecraftバージョン</InputLabel>
                <Select
                  value={packFormat}
                  onChange={(e) => setPackFormat(Number(e.target.value))}
                  label="Minecraftバージョン"
                >
                  {MINECRAFT_VERSIONS.map((version) => (
                    <MenuItem key={version.packFormat} value={version.packFormat}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: '100%' }}>
                        <Typography variant="body2" sx={{ flexGrow: 1 }}>
                          {version.displayName}
                        </Typography>
                        <Chip 
                          label={`PF:${version.packFormat}`} 
                          size="small" 
                          variant="outlined"
                          color={version.isRecommended ? "primary" : "default"}
                        />
                        {version.isRecommended && (
                          <Chip 
                            label="推奨" 
                            size="small" 
                            color="success"
                          />
                        )}
                      </Box>
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              
              <Alert severity="info" sx={{ mt: 1 }}>
                <Typography variant="body2">
                  {getPackFormatHelperText(packFormat)}
                </Typography>
              </Alert>
            </CardContent>
          </Card>

          {/* Generation Process */}
          <Card sx={{ mt: 2 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                生成プロセス
              </Typography>
              
              <Stepper orientation="vertical">
                <Step completed>
                  <StepLabel>ファイル解析</StepLabel>
                </Step>
                <Step completed>
                  <StepLabel>データ変換</StepLabel>
                </Step>
                <Step active={isGenerating}>
                  <StepLabel>ZIP圧縮</StepLabel>
                </Step>
                <Step>
                  <StepLabel>ダウンロード</StepLabel>
                </Step>
              </Stepper>

              {isGenerating && (
                <Box sx={{ mt: 2 }}>
                  <Typography variant="body2" color="text.secondary" gutterBottom>
                    生成中... {generationProgress}%
                  </Typography>
                  <LinearProgress 
                    variant="determinate" 
                    value={generationProgress}
                    sx={{ height: 8, borderRadius: 4 }}
                  />
                </Box>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* Preview & Stats */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <Info />
                生成内容
              </Typography>

              {/* File Summary */}
              <Box sx={{ mb: 3 }}>
                <Typography variant="subtitle2" gutterBottom>
                  インポートファイル
                </Typography>
                <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
                  <Chip 
                    label={`${stats.jsonFiles} JSONファイル`} 
                    color="primary" 
                    variant="outlined"
                    size="small"
                  />
                  <Chip 
                    label={`${stats.langFiles} LANGファイル`} 
                    color="secondary" 
                    variant="outlined"
                    size="small"
                  />
                </Box>

                {translatedEntries.length > 0 && (
                  <>
                    <Typography variant="subtitle2" gutterBottom>
                      翻訳データ
                    </Typography>
                    <Chip 
                      label={`${translatedEntries.length} 翻訳エントリー`} 
                      color="success" 
                      variant="outlined"
                      size="small"
                    />
                  </>
                )}
              </Box>

              <Divider sx={{ mb: 2 }} />

              {/* Output Structure Preview */}
              <Typography variant="subtitle2" gutterBottom>
                生成される構造
              </Typography>
              <Box 
                sx={{ 
                  bgcolor: 'action.hover', 
                  p: 2, 
                  borderRadius: 2,
                  fontFamily: 'monospace',
                  fontSize: '0.875rem',
                  mb: 2
                }}
              >
                <div>📦 {packName.replace(/\s+/g, '-').toLowerCase()}.zip</div>
                <div>├── 📄 pack.mcmeta</div>
                <div>└── 📁 assets/</div>
                <div>&nbsp;&nbsp;&nbsp;&nbsp;└── 📁 [modid]/</div>
                <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;└── 📁 lang/</div>
                <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;├── 📄 en_us.json</div>
                {translatedEntries.length > 0 && (
                  <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;└── 📄 ja_jp.json</div>
                )}
              </Box>

              {/* Warnings */}
              {translatedEntries.length === 0 && (
                <Alert severity="warning" sx={{ mb: 2 }}>
                  翻訳されたエントリーがありません。元のファイルのみでパックを生成します。
                </Alert>
              )}

              {/* Generate Button */}
              <Button
                fullWidth
                variant="contained"
                size="large"
                startIcon={isGenerating ? <Build /> : <FileDownload />}
                onClick={handleGenerate}
                disabled={isGenerating}
                sx={{
                  py: 1.5,
                  fontSize: '1.1rem',
                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                  '&:hover': {
                    background: 'linear-gradient(135deg, #764ba2 0%, #667eea 100%)',
                  },
                }}
              >
                {isGenerating ? 'パック生成中...' : 'リソースパックを生成'}
              </Button>
            </CardContent>
          </Card>

          {/* Advanced Options */}
          <Accordion sx={{ mt: 2 }}>
            <AccordionSummary expandIcon={<ExpandMore />}>
              <Typography variant="subtitle1">高度な設定</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <List dense>
                <ListItem>
                  <ListItemText
                    primary="ファイル圧縮"
                    secondary="ZIPファイルの圧縮レベル: 標準"
                  />
                </ListItem>
                <ListItem>
                  <ListItemText
                    primary="文字エンコーディング"
                    secondary="UTF-8 (Minecraft標準)"
                  />
                </ListItem>
                <ListItem>
                  <ListItemText
                    primary="互換性チェック"
                    secondary="パックフォーマットとMinecraftバージョンの検証"
                  />
                </ListItem>
              </List>
            </AccordionDetails>
          </Accordion>
        </Grid>
      </Grid>
    </Box>
  )
}

export default GenerateView